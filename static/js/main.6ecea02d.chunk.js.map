{"version":3,"sources":["calculator/constants.js","calculator/calculateFare.js","calculator/pieChart.js","calculator/barChart.js","calculator/totalAmount.js","calculator/report.js","calculator/parent.js","App.js","index.js"],"names":["amountNames","Rajeev","Nandan","Shreyas","Tirth","Bhanu","booleanNames","All","CalculateFare","props","React","useState","nameList","setNameList","name","setName","price","setPrice","useEffect","lastValue","handleCalculation","handleChange","event","target","checked","doneValue","addClick","obj","purchasedByList","count","Object","keys","length","forEach","item","pricePerPerson","handleAdd","indexValue","handleItemList","Fragment","Grid","container","spacing","style","paddingTop","xs","FormControl","sx","m","width","variant","InputLabel","htmlFor","Input","id","label","value","onChange","marginRight","disabled","isDone","type","startAdornment","InputAdornment","position","component","FormGroup","aria-label","row","map","key","FormControlLabel","control","Checkbox","labelPlacement","Button","backgroundColor","color","onClick","handleDone","isCompute","handleAmountChange","ChartJS","register","ArcElement","Tooltip","Legend","CategoryScale","LinearScale","BarElement","Title","options","responsive","plugins","legend","display","title","text","BarChart","chartData","setChartData","show","setShow","labels","amount","unsortedData","data","displayData","fromEntries","entries","sort","push","Math","round","datasets","index","TotalAmount","amountData","Typography","fontSize","fontWeight","gutterBottom","fsx","OutlinedInput","marginTop","Report","amountList","setAmountList","itemList","setItemList","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","dummyAmountList","dummyItemList","totalData","dummyArray","itemData","doc","jsPDF","setFontSize","setTextColor","autoTable","head","body","startY","showHead","alignOne","lastAutoTable","finalY","save","endIcon","styled","Paper","theme","typography","body2","padding","textAlign","palette","secondary","Parent","countList","setCountList","priceList","setPriceList","done","setDone","compute","setCompute","setEdit","report","setReport","handlePrice","isAdd","dummyList","dummyCountList","newValue","itemName","itemPrice","purchasedBy","handleAmount","dummyData","document","getElementById","scrollIntoView","Box","flexGrow","md","Card","margin","CardContent","align","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6ecea02d.chunk.js","sourcesContent":["export const amountNames = {\r\n    Rajeev: 0.00,\r\n    Nandan: 0.00,\r\n    Shreyas: 0.00,\r\n    Tirth: 0.00,\r\n    Bhanu: 0.00\r\n}\r\n\r\nexport const booleanNames = {\r\n    Rajeev: false,\r\n    Nandan: false,\r\n    Shreyas: false,\r\n    Tirth: false,\r\n    Bhanu: false,\r\n    All: false\r\n}","import React, { useEffect } from \"react\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Button from \"@mui/material/Button\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport Input from \"@mui/material/Input\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport { booleanNames, amountNames } from \"./constants\";\r\n\r\nexport default function CalculateFare(props) {\r\n  const [nameList, setNameList] = React.useState({ ...booleanNames });\r\n  const [name, setName] = React.useState(\"\");\r\n  const [price, setPrice] = React.useState(null);\r\n\r\n  // to handle product name\r\n  const handleName = (event) => {\r\n    setName(event.target.value);\r\n  };\r\n\r\n  // to call calculate method if last value\r\n  useEffect(() => {\r\n    if (!props.lastValue) {\r\n      handleCalculation(false, false);\r\n    }\r\n  }, [price, nameList]);\r\n\r\n  // to handle price\r\n  const handlePrice = (event) => {\r\n    setPrice(event.target.value);\r\n  };\r\n\r\n  // invoked on clicking done button\r\n  const handleDone = () => {\r\n    handleCalculation(true, false);\r\n    props.handleDone(true);\r\n  };\r\n\r\n  // to handle check box\r\n  const handleChange = (event) => {\r\n    setNameList({\r\n      ...nameList,\r\n      [event.target.name]: event.target.checked,\r\n    });\r\n  };\r\n\r\n  // to handle the calculation\r\n  const handleCalculation = (doneValue, addClick) => {\r\n    let obj = { ...amountNames };\r\n    let purchasedByList = \"\";\r\n    if (price !== 0) {\r\n      let count = 0;\r\n      // to get the people count involved\r\n      if (nameList[\"All\"] == true) {\r\n        count = Object.keys(nameList).length - 1;\r\n      } else {\r\n        Object.keys(nameList).forEach((item) => {\r\n          if (nameList[item] == true) {\r\n            count = count + 1;\r\n          }\r\n        });\r\n      }\r\n\r\n      let pricePerPerson = price / count;\r\n\r\n      // to update the shared price of product\r\n      Object.keys(nameList).forEach((item) => {\r\n        if (\r\n          item != \"All\" &&\r\n          (nameList[item] == true || nameList[\"All\"] == true)\r\n        ) {\r\n          obj[item] = obj[item] + pricePerPerson;\r\n          purchasedByList = purchasedByList\r\n            ? purchasedByList + \", \" + item\r\n            : purchasedByList + item;\r\n        }\r\n      });\r\n\r\n      props.handleAdd(obj, doneValue, addClick, props.indexValue);\r\n      // to store the items for report\r\n      props.handleItemList(props.indexValue, name, price, purchasedByList);\r\n    }\r\n  };\r\n\r\n  // invoked on clicking compute button\r\n  const handleCompute = () => {\r\n    props.handleAmountChange();\r\n  };\r\n\r\n  // invoked on clicking edit button\r\n  const handleEdit = () => {\r\n    props.handleDone(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2} style={{ paddingTop: \"20px\" }}>\r\n        <Grid item xs={12}>\r\n          <FormControl sx={{ m: 1, width: \"25ch\" }} variant=\"standard\">\r\n            <InputLabel htmlFor=\"standard-adornment-password\">\r\n              Product Name\r\n            </InputLabel>\r\n            <Input\r\n              id=\"outlined-name\"\r\n              label=\"Name\"\r\n              value={name}\r\n              onChange={handleName}\r\n              variant=\"standard\"\r\n              style={{ marginRight: \"20px\" }}\r\n              disabled={props.isDone}\r\n            />\r\n          </FormControl>\r\n          <FormControl sx={{ m: 1, width: \"25ch\" }} variant=\"standard\">\r\n            <InputLabel htmlFor=\"standard-adornment-password\">Price</InputLabel>\r\n            <Input\r\n              id=\"outlined-uncontrolled\"\r\n              label=\"Price\"\r\n              value={price}\r\n              type={\"number\"}\r\n              onChange={handlePrice}\r\n              variant=\"standard\"\r\n              startAdornment={\r\n                <InputAdornment position=\"start\">$</InputAdornment>\r\n              }\r\n              disabled={props.isDone}\r\n            />\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <FormControl sx={{ m: 3 }} component=\"fieldset\" variant=\"standard\">\r\n            <FormGroup aria-label=\"position\" row>\r\n              {Object.keys(nameList).map(function (key) {\r\n                return (\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={nameList[key]}\r\n                        onChange={handleChange}\r\n                        name={key}\r\n                        disabled={\r\n                          props.isDone ||\r\n                          (nameList[\"All\"] == true && key != \"All\")\r\n                        }\r\n                      />\r\n                    }\r\n                    label={key}\r\n                    labelPlacement=\"bottom\"\r\n                  />\r\n                );\r\n              })}\r\n            </FormGroup>\r\n          </FormControl>\r\n        </Grid>\r\n      </Grid>\r\n      {!props.isDone && props.lastValue ? (\r\n        <Button\r\n          variant=\"outlined\"\r\n          style={{\r\n            backgroundColor: \"green\",\r\n            marginRight: \"10px\",\r\n            color: \"white\",\r\n          }}\r\n          onClick={() => {\r\n            handleCalculation(false, true);\r\n          }}\r\n        >\r\n          Add\r\n        </Button>\r\n      ) : null}\r\n      {props.lastValue && !props.isDone ? (\r\n        <Button\r\n          variant=\"outlined\"\r\n          style={{\r\n            backgroundColor: \"lightblue\",\r\n            marginRight: \"10px\",\r\n            color: \"white\",\r\n          }}\r\n          onClick={() => {\r\n            handleDone();\r\n          }}\r\n        >\r\n          Done\r\n        </Button>\r\n      ) : null}\r\n      {props.lastValue && props.isDone && !props.isCompute ? (\r\n        <Button\r\n          variant=\"outlined\"\r\n          style={{\r\n            backgroundColor: \"green\",\r\n            marginRight: \"10px\",\r\n            color: \"white\",\r\n          }}\r\n          onClick={() => {\r\n            handleCompute();\r\n          }}\r\n        >\r\n          Compute\r\n        </Button>\r\n      ) : null}\r\n      {props.lastValue && props.isDone && !props.isCompute ? (\r\n        <Button\r\n          variant=\"outlined\"\r\n          style={{\r\n            backgroundColor: \"lightblue\",\r\n            marginRight: \"10px\",\r\n            color: \"white\",\r\n          }}\r\n          onClick={() => {\r\n            handleEdit();\r\n          }}\r\n        >\r\n          Edit\r\n        </Button>\r\n      ) : null}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\r\nimport { Pie } from \"react-chartjs-2\";\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nexport default function PieChart(props) {\r\n  const [chartData, setChartData] = useState(null);\r\n  const [show, setShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let names = [];\r\n    let amount = [];\r\n    let displayData = props.data;\r\n    if (displayData !== null) {\r\n      Object.keys(displayData).map(function (key) {\r\n        names.push(key);\r\n        if (displayData[key] > 0) {\r\n          setShow(true);\r\n        }\r\n        amount.push(Math.round(displayData[key] * 100) / 100);\r\n      });\r\n    }\r\n    let data = {\r\n      labels: names,\r\n      datasets: [\r\n        {\r\n          label: \"Amount spent\",\r\n          data: amount,\r\n          backgroundColor: [\r\n            \"rgba(255, 99, 132, 0.2)\",\r\n            \"rgba(54, 162, 235, 0.2)\",\r\n            \"rgba(255, 206, 86, 0.2)\",\r\n            \"rgba(75, 192, 192, 0.2)\",\r\n            \"rgba(153, 102, 255, 0.2)\",\r\n            \"rgba(255, 159, 64, 0.2)\",\r\n          ],\r\n          borderColor: [\r\n            \"rgba(255, 99, 132, 1)\",\r\n            \"rgba(54, 162, 235, 1)\",\r\n            \"rgba(255, 206, 86, 1)\",\r\n            \"rgba(75, 192, 192, 1)\",\r\n            \"rgba(153, 102, 255, 1)\",\r\n            \"rgba(255, 159, 64, 1)\",\r\n          ],\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    };\r\n\r\n    setChartData(data);\r\n  }, [props]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {chartData !== null && show ? (\r\n        <Pie\r\n          data={chartData}\r\n          height=\"350px\"\r\n          width=\"350px\"\r\n          options={{ maintainAspectRatio: false }}\r\n        />\r\n      ) : null}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport const options = {\r\n  responsive: true,\r\n  plugins: {\r\n    legend: {\r\n      position: \"top\",\r\n      display: false,\r\n    },\r\n    title: {\r\n      display: true,\r\n      text: \"Amount Spent\",\r\n    },\r\n  },\r\n};\r\n\r\nexport default function BarChart(props) {\r\n  const [chartData, setChartData] = useState(null);\r\n  const [show, setShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let labels = [];\r\n    let amount = [];\r\n    let unsortedData = props.data;\r\n\r\n    // to sort the data\r\n    const displayData = Object.fromEntries(\r\n      Object.entries(unsortedData).sort(([, a], [, b]) => a - b)\r\n    );\r\n    // to get lables and amount in list\r\n    if (displayData !== null) {\r\n      Object.keys(displayData).map(function (key) {\r\n        labels.push(key);\r\n        if (displayData[key] > 0) {\r\n          setShow(true);\r\n        }\r\n        amount.push(Math.round(displayData[key] * 100) / 100);\r\n      });\r\n    }\r\n\r\n    // preparing the data to show on bar chart\r\n    let data = {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: \"\",\r\n          data: labels.map((item, index) => amount[index]),\r\n          backgroundColor: [\r\n            \"#6CFF33\",\r\n            \"#33FFBA\",\r\n            \"#33E7FF\",\r\n            \"#F033FF\",\r\n            \"#FFD233\",\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n\r\n    setChartData(data);\r\n  }, [props]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {chartData !== null && show ? (\r\n        <Bar options={options} data={chartData} />\r\n      ) : null}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport PieChart from './pieChart';\r\nimport BarChart from './barChart';\r\n\r\n\r\nexport default function TotalAmount(props) {\r\n    return (\r\n        <React.Fragment>\r\n            {Object.keys(props.amountData).map(function (key) {\r\n                return (<Grid container spacing={2} style={{ paddingTop: \"20px\" }}>\r\n                    <Grid item xs={3}>\r\n                        <Typography sx={{ fontSize: 16, fontWeight: \"bold\" }} style={{ color: \"black\" }} gutterBottom>\r\n                            {key}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={9}>\r\n                        <FormControl fsx={{ m: 1, width: '25ch' }} >\r\n                            <InputLabel htmlFor=\"outlined-adornment-amount\">Amount</InputLabel>\r\n                            <OutlinedInput\r\n                                id={key}\r\n                                value={Math.round(props.amountData[key] * 100) / 100}\r\n                                startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\r\n                                label=\"Amount\"\r\n                                disabled\r\n                            />\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>)\r\n            })}\r\n            {/* <div style={{ marginTop: \"50px\" }}>\r\n                <PieChart data={props.amountData} />\r\n            </div> */}\r\n            <div style={{ marginTop: \"50px\" }}>\r\n                <BarChart data={props.amountData} />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport jsPDF from \"jspdf\";\r\nimport Button from \"@mui/material/Button\";\r\nimport autoTable from \"jspdf-autotable\";\r\nimport DownloadIcon from \"@mui/icons-material/Download\";\r\n\r\nexport default function Report(props) {\r\n  const [amountList, setAmountList] = React.useState([]);\r\n  const [itemList, setItemList] = React.useState([]);\r\n\r\n  // to get the date\r\n  let today = new Date();\r\n  let dd = String(today.getDate()).padStart(2, \"0\");\r\n  let mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\r\n  let yyyy = today.getFullYear();\r\n  today = mm + \"/\" + dd + \"/\" + yyyy;\r\n\r\n  useEffect(() => {\r\n    let dummyAmountList = [];\r\n    let dummyItemList = [];\r\n    // to arrange the total amount list\r\n    Object.keys(props.totalData).forEach((item) => {\r\n      let dummyArray = [];\r\n      dummyArray.push(item);\r\n      dummyArray.push(Math.round(props.totalData[item] * 100) / 100);\r\n      dummyAmountList.push(dummyArray);\r\n    });\r\n    setAmountList(dummyAmountList);\r\n\r\n    // to arrange the all items list\r\n    props.itemData.forEach((data) => {\r\n      let dummyArray = [];\r\n      Object.keys(data).forEach((value) => {\r\n        dummyArray.push(data[value]);\r\n      });\r\n      dummyItemList.push(dummyArray);\r\n      setItemList(dummyItemList);\r\n    });\r\n  }, []);\r\n\r\n  const Report = () => {\r\n    const doc = new jsPDF(\"l\", \"mm\", [297, 210]);\r\n\r\n    doc.setFontSize(18);\r\n    doc.text(\"This PDF is generated on \" + today, 14, 20);\r\n    doc.setTextColor(100);\r\n\r\n    doc.setFontSize(18);\r\n    doc.text(\"Individual Expenses Summary \", 14, 30);\r\n    doc.setTextColor(100);\r\n\r\n    autoTable(doc, {\r\n      head: [[\"Name\", \"Amount ($)\"]],\r\n      body: amountList,\r\n      startY: 35,\r\n      showHead: \"firstPage\",\r\n    });\r\n\r\n    // to get where the last table ended\r\n    let alignOne = doc.lastAutoTable.finalY + 15;\r\n\r\n    doc.setFontSize(18);\r\n    doc.text(\"Details of Items Purchased \", 14, alignOne);\r\n    doc.setTextColor(100);\r\n\r\n    autoTable(doc, {\r\n      head: [[\"Product\", \"Price ($)\", \"Purchased By\"]],\r\n      body: itemList,\r\n      startY: alignOne + 5,\r\n    });\r\n\r\n    doc.save(\"Expenses_\" + today + \"_.pdf\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        variant=\"outlined\"\r\n        style={{ backgroundColor: \"green\", color: \"white\" }}\r\n        onClick={() => {\r\n          Report();\r\n        }}\r\n        endIcon={<DownloadIcon />}\r\n      >\r\n        Report\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport CalculateFare from \"./calculateFare\";\r\nimport TotalAmount from \"./totalAmount\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport { amountNames } from \"./constants\";\r\nimport Report from \"./report\";\r\n\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n  ...theme.typography.body2,\r\n  padding: theme.spacing(1),\r\n  textAlign: \"center\",\r\n  color: theme.palette.text.secondary,\r\n}));\r\n\r\nexport default function Parent() {\r\n  const [countList, setCountList] = React.useState([0]);\r\n  const [priceList, setPriceList] = React.useState([]);\r\n  const [amountList, setAmountList] = React.useState({ ...amountNames });\r\n  const [done, setDone] = React.useState(false);\r\n  const [compute, setCompute] = React.useState(false);\r\n  const [edit, setEdit] = React.useState(false);\r\n  const [report, setReport] = React.useState(false);\r\n  const [itemList, setItemList] = React.useState([]);\r\n\r\n  // to set done and edit values\r\n  const handleDone = (value) => {\r\n    if (value == false) {\r\n      setEdit(true);\r\n    }\r\n    setDone(value);\r\n  };\r\n\r\n  // to store the calculation data after adding every new item\r\n  const handlePrice = (value, isDone, isAdd, index) => {\r\n    let dummyList = [...priceList];\r\n    if (dummyList.length > index) {\r\n      dummyList[index] = value;\r\n    } else {\r\n      dummyList.push(value);\r\n    }\r\n    if (isAdd && !isDone) {\r\n      let dummyCountList = [...countList];\r\n      let newValue = dummyCountList.length + 1;\r\n      dummyCountList.push(newValue);\r\n      setCountList(dummyCountList);\r\n    }\r\n    setPriceList(dummyList);\r\n  };\r\n\r\n  // to get the details of items for report\r\n  const handleItemList = (index, name, price, purchasedByList) => {\r\n    let dummyItemList = [...itemList];\r\n    let obj = {\r\n      itemName: name,\r\n      itemPrice: price,\r\n      purchasedBy: purchasedByList,\r\n    };\r\n    if (dummyItemList.length > index) {\r\n      dummyItemList[index] = obj;\r\n    } else {\r\n      dummyItemList.push(obj);\r\n    }\r\n    setItemList(dummyItemList);\r\n  };\r\n\r\n  // to calculate the final amount and to scroll to top of the page\r\n  const handleAmount = () => {\r\n    setCompute(true);\r\n    let dummyData = { ...amountList };\r\n    priceList.forEach((price) => {\r\n      Object.keys(price).forEach((item) => {\r\n        dummyData[item] = dummyData[item] + price[item];\r\n      });\r\n    });\r\n    setAmountList(dummyData);\r\n    setReport(true);\r\n    var elmnt = document.getElementById(\"card\");\r\n    elmnt.scrollIntoView();\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} md={6}>\r\n          <Card\r\n            style={{ margin: \"10px\", backgroundColor: \"aliceblue\" }}\r\n            id=\"card\"\r\n          >\r\n            <CardContent>\r\n              <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                  <Typography\r\n                    sx={{ fontSize: 16, fontWeight: \"bold\" }}\r\n                    style={{ color: \"cadetblue\" }}\r\n                    gutterBottom\r\n                  >\r\n                    {`Total Amount`}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={6} align=\"right\">\r\n                  {report ? (\r\n                    <Report totalData={amountList} itemData={itemList} />\r\n                  ) : null}\r\n                </Grid>\r\n              </Grid>\r\n              <TotalAmount amountData={amountList} />\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <Card style={{ margin: \"10px\", backgroundColor: \"antiquewhite\" }}>\r\n            <CardContent>\r\n              <Typography\r\n                sx={{ fontSize: 16, fontWeight: \"bold\" }}\r\n                style={{ color: \"cadetblue\" }}\r\n                gutterBottom\r\n              >\r\n                {`Calculate Fare`}\r\n              </Typography>\r\n              {countList.map((item, index) => {\r\n                return (\r\n                  <CalculateFare\r\n                    handleAmountChange={handleAmount}\r\n                    handleAdd={handlePrice}\r\n                    lastValue={countList.length == index + 1}\r\n                    indexValue={index}\r\n                    isDone={done}\r\n                    isCompute={compute}\r\n                    handleDone={handleDone}\r\n                    handleItemList={handleItemList}\r\n                  />\r\n                );\r\n              })}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Parent from \"./calculator/parent\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment> \r\n      <Parent />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}